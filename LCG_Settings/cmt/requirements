
package LCG_Settings

include_path none

macro LCG_releases    "$(LCG_Settings_root)/../../.." \
      CAPTAIN	      "$(LCG_Settings_root)/../EXTERNALS" \
      ATLAS&NIGHTLIES "/afs/cern.ch/sw/lcg/app/nightlies/$(LCG_NGT_SLT_NAME)/$(LCG_NGT_DAY_NAME)" \
      ATLAS           "${SITEROOT}/sw/lcg/app/releases"

macro LCG_external  "$(LCG_Settings_root)/../../../../../external" \
      CAPTAIN	    "$(LCG_Settings_root)/../EXTERNALS" \
      ATLAS         "${SITEROOT}/sw/lcg/external"


# ==== pattern to express optional dependencies =====
pattern use_optional \
   macro use_pkg             "" \
         <package>_use_<pkg> "<pkg> v* LCG_Interfaces -no_auto_imports" \
         USE_ALL_OPT_PKGS    "<pkg> v* LCG_Interfaces -no_auto_imports" ;\
   use $(use_pkg)


# ==== pattern for declaring container packages ====
pattern composite_package \
  private ; \
    macro <package>_sub_packages "<parts>" ; \
    macro <package>_is_composite "1" ; \
  end_private

# ==== macro to set the "root" directory of a project ====
cmtpath_pattern macro <project>_home "<path>"

# ====== pattern to set list of libraries to be linked to InstallArea ==

pattern declare_installed_libraries \
   private ;\
   macro list_cmd "$(LCG_Settings_root)/scripts/list_files.sh $(<package>_types) <dir> <extras>" ; \
   macro <package>_types "--type $(shlibsuffix) --type rootmap" ;  \
   macro_append <package>_types "" target-darwin " --type dylib" ;  \
   macro <package>_libraries `$(list_cmd)` target-win "" ignore_installarea "" ;\
   end_private

# ====== pattern to create symbolic links to external libraries (<type> starts with "lib"), executables (<type> starts with "exe"), or both file types otherwise from <dir> in InstallArea ==

pattern symlink_extern \
   private ; \
   action <package>_symlink_extern_<type> "python $(LCG_Settings_root)/python/lcg_InstallArea.py -p <package> -r $(<package>_root) -H '<dir>' -t '<type>' " ; \
   macro_append all_dependencies "" \
                 <project>_with_installarea&target-unix   " <package>_symlink_extern_<type>" ; \
   end_private

# ===== patterns to set PATH and LD_LIBRARY_PATH ==========================
# ===== they use the <project> build_strategy =============================

macro unixdirname               "lib" \
      target-unix&target-x86_64 "lib64"

pattern set_bin_and_lib_path \
    apply_pattern clean_path ; \
    apply_pattern set_lib_path ; \
    apply_pattern set_bin_path 

pattern set_ext_bin_and_lib_path \
    apply_pattern clean_path ; \
    apply_pattern set_ext_lib_path windir=<windir> unixdir=<unixdir> ; \
    apply_pattern set_bin_path 

pattern set_real_lib_path \
    private ; \
    apply_tag ignore_installarea ; \
    apply_pattern set_ext_lib_path windir=lib unixdir=lib ; \
    end_private

pattern set_lib_path \
    apply_pattern set_ext_lib_path windir=lib unixdir=lib ;

pattern clean_path \
    path_remove LD_LIBRARY_PATH   "/<package>/"         target-win "" ;\
    path_remove LD_LIBRARY_PATH   "/$(<package>_name)/" target-win "" ;\
    path_remove DYLD_LIBRARY_PATH ""                    target-win "" target-darwin "/<package>/"  ;\
    path_remove DYLD_LIBRARY_PATH ""                    target-win "" target-darwin "/$(<package>_name)/"  ;\
    path_remove PATH              "/<package>/" ;\
    path_remove PATH              ""                    target-win "\<package>\" ;\
    path_remove PATH              "/$(<package>_name)/" ;\
    path_remove PATH              ""                    target-win "\$(<package>_name)\"  ;
     

pattern set_ext_lib_path \
    apply_pattern symlink_extern dir=$(<package>_home) type=lib ;\
    apply_pattern clean_path ;\
    path_prepend LD_LIBRARY_PATH                             "$(<package>_home)/<unixdir>"  \
                 target-win                                  "" \
                 <project>_without_installarea&target-unix   "$(<package>_home)/<unixdir>" \
                 ignore_installarea&target-unix              "$(<package>_home)/<unixdir>" \
                 <project>_with_installarea&target-unix      "" ;\
    path_prepend PATH                                        "" \
                 target-win                                  "$(<package>_home)\<windir>" ;\
    path_prepend DYLD_LIBRARY_PATH                           "" \
                 <project>_without_installarea&target-darwin "$(<package>_home)/<unixdir>" \
                 ignore_installarea&target-unix              "$(<package>_home)/<unixdir>" \
                 <project>_with_installarea&target-darwin    "" \
                 target-darwin                               "$(<package>_home)/<unixdir>"

# At the moment symbolic links for binaries/exectutables are not setup 
# for the InstallArea so the external package  /bin directory is used
# for all configurations.
pattern set_bin_path \
    apply_pattern symlink_extern dir=$(<package>_home) type=exe ;\
    path_prepend PATH                               "$(<package>_home)/bin" \
        <project>_without_installarea&target-unix   "$(<package>_home)/bin" \
        <project>_without_installarea&target-darwin "$(<package>_home)/bin" \
         target-win                                 "$(<package>_home)/bin" \
        <project>_with_installarea&target-unix      "$(<package>_home)/bin" \
        <project>_with_installarea&target-darwin    "$(<package>_home)/bin" ;


# sets up the man path (on unix only)
pattern set_man_path \
    apply_pattern set_ext_man_path mandir=man ;

pattern set_ext_man_path \ 
    path_remove MANPATH                             "/<package>/" \
         target-win                                 "" ; \
    path_prepend MANPATH                            "$(<package>_home)/<mandir>" \
        <project>_without_installarea&target-unix   "$(<package>_home)/<mandir>" \
        <project>_without_installarea&target-darwin "$(<package>_home)/<mandir>" \
         target-win                                 "" \
        <project>_with_installarea&target-unix      "$(<package>_home)/<mandir>" \
        <project>_with_installarea&target-darwin    "$(<package>_home)/<mandir>" ;

# ==== Compiler Names and environment setup ====

# LINKER
set_append LDFLAGS                        "" \
      host-x86_64&target-i686              " -m32"

# C Preprocessor
set_append CPPFLAGS                        "" \
      host-x86_64&target-i686              " -m32"

